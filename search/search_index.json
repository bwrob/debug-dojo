{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"debug dojo","text":"<p> debug dojo, a place for zen debugging </p> <p> </p> <p>debug-dojo is a Python package providing utilities for enhanced debugging and inspection in the terminal. It leverages <code>rich</code> for beautiful output and offers helpers for side-by-side object comparison, improved tracebacks from <code>rich</code>, and easy integration with different debuggers \u2013 <code>debugpy</code>, <code>pudb</code>, <code>pdb</code>, and <code>ipdb</code>.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Convenient CLI Quickly run your code with debugging tools     enabled.</li> <li>Simple API: Install all tools or only what you need.</li> <li>Debugger integration: Quickly enable Debugpy, PuDB, PDB, or IPDB     as your default pre-configured debugger.</li> <li>Rich tracebacks: Get readable, colorized tracebacks for easier     debugging.</li> <li>Side-by-side object inspection: Visually compare Python objects,     their attributes, and methods in the terminal.</li> <li>Configuration: Easily configure the debugging tools using     <code>dojo.toml</code> or <code>pyproject.toml</code>.</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#cli","title":"CLI","text":"<p>Run your Python script with debugging tools enabled using the <code>debug-dojo</code> command:</p> <pre><code>dojo my_script.py\n</code></pre> <p>You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported:</p> <pre><code>dojo --debugger ipdb --config dojo.toml --verbose --module my_module\n</code></pre>"},{"location":"#from-the-code","title":"From the code","text":"<p>In the <code>PuDB</code> style, you can install all debugging tools and enter the debugging mode with a single command:</p> <pre><code>object_1 = {\"foo\": 1, \"bar\": 2}\nobject_2 = [1, 2, 3]\n\nimport debug_dojo.install; b()\np(object_1)  # Pretty print an object with Rich\n</code></pre>"},{"location":"#features-in-debugging-mode","title":"Features in debugging mode","text":"<p>The following functions are available in the debugging mode, injected into builtins:</p> <ul> <li><code>b()</code> is a hook that sets a breakpoint using the configured debugger.</li> <li><code>p(object_1)</code> is pretty printing of an object using Rich.</li> <li><code>i(object_1)</code> to inspect an object using Rich.</li> <li><code>c(object_1, object_2)</code> to compare two objects side-by-side.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>The package is available on PyPI and can be installed using standard Python package management tools.</p> <pre><code>pip install debug-dojo\n</code></pre> <p>You can also use <code>poetry</code> or <code>uv</code> to add it to your project:</p> <pre><code>poetry add debug-dojo\n</code></pre> <pre><code>uv add debug-dojo\n</code></pre> <p>Note that dojo most likely will not work when installed via <code>pipx</code> or <code>uvx</code>, as it relies on the current Python environment dependencies.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Debugging tools for Python.</p> <p>This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly.</p> <p>Importing this module will install the debugging tools based on the configuration. Example usage:</p> <pre><code>import debug_dojo.install\n\nb()\n</code></pre> <p>This will install the debugging tools and put debug breakpoint at this line.</p> <p>Another way to use this module is to run the desired script or module with the <code>dojo</code> command-line interface.</p> <pre><code>$ dojo --verbose --config dojo.toml target_script.py --arg_1_for_script value1\n</code></pre> <p>Debugging tools for Python.</p> <p>This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly.</p> <p>Utilities for side-by-side inspection and comparison of Python objects using Rich.</p> <p>This module provides functions to display attributes and methods of two objects in a visually appealing, side-by-side format in the terminal.</p> <p>Debug Dojo configuration module.</p> <p>It includes configurations for different debuggers, exception handling, and features that can be enabled or disabled.</p> <p>Command-line interface for running Python scripts or modules with debugging tools.</p>"},{"location":"api-reference/#debug_dojo._installers.install_by_config","title":"<code>install_by_config(config)</code>","text":"<p>Install debugging tools.</p> Source code in <code>src/debug_dojo/_installers.py</code> <pre><code>def install_by_config(config: DebugDojoConfig) -&gt; None:\n    \"\"\"Install debugging tools.\"\"\"\n    _set_debugger(config.debuggers)\n    _set_exceptions(config.exceptions)\n    _install_features(config.features)\n</code></pre>"},{"location":"api-reference/#debug_dojo._compareres.inspect_objects_side_by_side","title":"<code>inspect_objects_side_by_side(obj1, obj2)</code>","text":"<p>Display two Python objects side-by-side in the terminal using Rich.</p> <p>Showing their attributes and methods in a simplified, aligned format.</p> Source code in <code>src/debug_dojo/_compareres.py</code> <pre><code>def inspect_objects_side_by_side(\n    obj1: object,\n    obj2: object,\n) -&gt; None:\n    \"\"\"Display two Python objects side-by-side in the terminal using Rich.\n\n    Showing their attributes and methods in a simplified, aligned format.\n    \"\"\"\n    main_console: Console = Console()\n\n    lines1: list[Text] = _get_simplified_object_info(obj1)\n    lines2: list[Text] = _get_simplified_object_info(obj2)\n\n    # Determine the maximum number of lines to ensure consistent height\n    max_lines: int = max(len(lines1), len(lines2))\n\n    # Pad the shorter list of lines with empty Text objects to match the height\n    if len(lines1) &lt; max_lines:\n        lines1.extend([Text(\"\")] * (max_lines - len(lines1)))\n    if len(lines2) &lt; max_lines:\n        lines2.extend([Text(\"\")] * (max_lines - len(lines2)))\n\n    # Join the padded lines into a single Text object for the Panel content\n    padded_inspect_text1: Text = Text(\"\\n\").join(lines1)\n    padded_inspect_text2: Text = Text(\"\\n\").join(lines2)\n\n    panel1: Panel = Panel(padded_inspect_text1, border_style=\"green\", expand=True)\n    panel2: Panel = Panel(padded_inspect_text2, border_style=\"green\", expand=True)\n\n    main_console.print(Columns([panel1, panel2]))\n</code></pre>"},{"location":"api-reference/#debug_dojo._config.__filter_pydantic_error_msg","title":"<code>__filter_pydantic_error_msg(error)</code>","text":"<p>Filter out specific lines from a Pydantic validation error.</p> Source code in <code>src/debug_dojo/_config.py</code> <pre><code>def __filter_pydantic_error_msg(error: ValidationError) -&gt; str:\n    \"\"\"Filter out specific lines from a Pydantic validation error.\"\"\"\n    return \"\\n\".join(\n        line\n        for line in str(error).splitlines()\n        if not line.startswith(\"For further information visit\")\n    )\n</code></pre>"},{"location":"api-reference/#debug_dojo._config.load_config","title":"<code>load_config(config_path=None, *, verbose=False, debugger=None)</code>","text":"<p>Load the Debug Dojo configuration and return a DebugDojoConfig instance.</p> Source code in <code>src/debug_dojo/_config.py</code> <pre><code>def load_config(  # noqa: C901\n    config_path: Path | None = None,\n    *,\n    verbose: bool = False,\n    debugger: DebuggerType | None = None,\n) -&gt; DebugDojoConfig:\n    \"\"\"Load the Debug Dojo configuration and return a DebugDojoConfig instance.\"\"\"\n    resolved_path = resolve_config_path(config_path)\n\n    if verbose:\n        if resolved_path:\n            msg = f\"Using configuration file: {resolved_path}.\"\n        else:\n            msg = \"No configuration file found, using default settings.\"\n        rich_print(f\"[blue]{msg}[/blue]\")\n\n    if not resolved_path:\n        return DebugDojoConfig()\n\n    raw_config = load_raw_config(resolved_path)\n\n    config = None\n    for model in (DebugDojoConfigV2, DebugDojoConfigV1):\n        model_name = model.__name__\n        try:\n            config = model.model_validate(raw_config)\n        except ValidationError as e:\n            if verbose:\n                msg = (\n                    f\"[yellow]Configuration validation error for {model_name}:\\n\"\n                    f\"{__filter_pydantic_error_msg(e)}\\n\\n\"\n                    f\"Please check your configuration file {resolved_path}.[/yellow]\"\n                )\n                rich_print(msg)\n        else:\n            if verbose or model_name != DebugDojoConfig.__name__:\n                msg = (\n                    f\"[blue]Using configuration model: {model_name}.\\n\"\n                    f\"Current configuration model {DebugDojoConfig.__name__}. [/blue]\"\n                )\n                rich_print(msg)\n            break\n\n    if not config:\n        msg = (\n            f\"[red]Unsupported configuration version in {resolved_path.resolve()}.\\n\"\n            \"Please update your configuration file.[/red]\"\n        )\n        rich_print(msg)\n        sys.exit(1)\n\n    while not isinstance(config, DebugDojoConfig):\n        config = config.update()\n\n    # If a debugger is specified, update the config.\n    if debugger:\n        config.debuggers.default = debugger\n\n    return config\n</code></pre>"},{"location":"api-reference/#debug_dojo._config.load_raw_config","title":"<code>load_raw_config(config_path)</code>","text":"<p>Load the Debug Dojo configuration from a file.</p> <p>Currently supports \u2018dojo.toml\u2019 or \u2018pyproject.toml\u2019. If no path is provided, it checks the current directory for these files.</p> Source code in <code>src/debug_dojo/_config.py</code> <pre><code>def load_raw_config(\n    config_path: Path,\n) -&gt; dict[str, Any]:  # pyright: ignore[reportExplicitAny]\n    \"\"\"Load the Debug Dojo configuration from a file.\n\n    Currently supports 'dojo.toml' or 'pyproject.toml'.\n    If no path is provided, it checks the current directory for these files.\n    \"\"\"\n    config_str = config_path.read_text(encoding=\"utf-8\")\n\n    try:\n        config_data = parse(config_str).unwrap()\n    except TOMLKitError as e:\n        msg = f\"Error parsing configuration file {config_path.resolve()}.\"\n        raise ValueError(msg) from e\n\n    # If config is in [tool.debug_dojo] (pyproject.toml), extract it.\n    if config_path.name == \"pyproject.toml\":\n        try:\n            dojo_config = cast(\"dict[str, Any]\", config_data[\"tool\"][\"debug_dojo\"])\n        except KeyError:\n            return {}\n        else:\n            return dojo_config\n\n    return config_data\n</code></pre>"},{"location":"api-reference/#debug_dojo._config.resolve_config_path","title":"<code>resolve_config_path(config_path)</code>","text":"<p>Resolve the configuration path, returning a default if none is provided.</p> Source code in <code>src/debug_dojo/_config.py</code> <pre><code>def resolve_config_path(config_path: Path | None) -&gt; Path | None:\n    \"\"\"Resolve the configuration path, returning a default if none is provided.\"\"\"\n    if config_path:\n        if not config_path.exists():\n            msg = f\"Configuration file not found:\\n{config_path.resolve()}\"\n            raise FileNotFoundError(msg)\n        return config_path.resolve()\n\n    # Default configuration path\n    for path in (Path(\"dojo.toml\"), Path(\"pyproject.toml\")):\n        if path.exists():\n            return path.resolve()\n    return None\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.BaseConfig","title":"<code>BaseConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base configuration class with extra fields forbidden.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class BaseConfig(BaseModel):\n    \"\"\"Base configuration class with extra fields forbidden.\"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\", validate_assignment=True)\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1","title":"<code>DebugDojoConfigV1</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for Debug Dojo.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class DebugDojoConfigV1(BaseModel):\n    \"\"\"Configuration for Debug Dojo.\"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\")  # pyright: ignore[reportUnannotatedClassAttribute]\n\n    debugger: DebuggerType = DebuggerType.PUDB\n    \"\"\"The type of debugger to use.\"\"\"\n    features: Features = Features()\n    \"\"\"Features to install for debugging.\"\"\"\n\n    def update(self) -&gt; DebugDojoConfigV2:\n        \"\"\"Update the configuration to the latest version.\"\"\"\n        v2_exceptions = ExceptionsConfig(\n            rich_traceback=self.features.rich_traceback,\n        )\n        v2_debuggers = DebuggersConfig(default=self.debugger)\n        v2_features = FeaturesConfig(\n            rich_inspect=\"i\" if self.features.rich_inspect else \"\",\n            rich_print=\"p\" if self.features.rich_print else \"\",\n            comparer=\"c\" if self.features.comparer else \"\",\n            breakpoint=\"b\" if self.features.breakpoint else \"\",\n        )\n        return DebugDojoConfigV2(\n            exceptions=v2_exceptions,\n            debuggers=v2_debuggers,\n            features=v2_features,\n        )\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.debugger","title":"<code>debugger = DebuggerType.PUDB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The type of debugger to use.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.features","title":"<code>features = Features()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Features to install for debugging.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.update","title":"<code>update()</code>","text":"<p>Update the configuration to the latest version.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>def update(self) -&gt; DebugDojoConfigV2:\n    \"\"\"Update the configuration to the latest version.\"\"\"\n    v2_exceptions = ExceptionsConfig(\n        rich_traceback=self.features.rich_traceback,\n    )\n    v2_debuggers = DebuggersConfig(default=self.debugger)\n    v2_features = FeaturesConfig(\n        rich_inspect=\"i\" if self.features.rich_inspect else \"\",\n        rich_print=\"p\" if self.features.rich_print else \"\",\n        comparer=\"c\" if self.features.comparer else \"\",\n        breakpoint=\"b\" if self.features.breakpoint else \"\",\n    )\n    return DebugDojoConfigV2(\n        exceptions=v2_exceptions,\n        debuggers=v2_debuggers,\n        features=v2_features,\n    )\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2","title":"<code>DebugDojoConfigV2</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for Debug Dojo.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class DebugDojoConfigV2(BaseModel):\n    \"\"\"Configuration for Debug Dojo.\"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\")  # pyright: ignore[reportUnannotatedClassAttribute]\n\n    exceptions: ExceptionsConfig = ExceptionsConfig()\n    debuggers: DebuggersConfig = DebuggersConfig()\n    \"\"\"Default debugger and configs.\"\"\"\n    features: FeaturesConfig = FeaturesConfig()\n    \"\"\"Features mnemonics .\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2.debuggers","title":"<code>debuggers = DebuggersConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default debugger and configs.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2.features","title":"<code>features = FeaturesConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Features mnemonics .</p>"},{"location":"api-reference/#debug_dojo._config_models.DebuggerType","title":"<code>DebuggerType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for different types of debuggers.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class DebuggerType(Enum):\n    \"\"\"Enum for different types of debuggers.\"\"\"\n\n    PDB = \"pdb\"\n    PUDB = \"pudb\"\n    IPDB = \"ipdb\"\n    DEBUGPY = \"debugpy\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig","title":"<code>DebuggersConfig</code>","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Configuration for debuggers.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class DebuggersConfig(BaseConfig):\n    \"\"\"Configuration for debuggers.\"\"\"\n\n    default: DebuggerType = DebuggerType.IPDB\n    \"\"\"Default debugger to use.\"\"\"\n    prompt_name: str = \"debug-dojo&gt; \"\n    \"\"\"Prompt name for the debugger, used in the REPL.\"\"\"\n    debugpy: DebugpyConfig = DebugpyConfig()\n    \"\"\"Configuration for debugpy debugger.\"\"\"\n    ipdb: IpdbConfig = IpdbConfig()\n    \"\"\"Configuration for ipdb debugger.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.debugpy","title":"<code>debugpy = DebugpyConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration for debugpy debugger.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.default","title":"<code>default = DebuggerType.IPDB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default debugger to use.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.ipdb","title":"<code>ipdb = IpdbConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration for ipdb debugger.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.prompt_name","title":"<code>prompt_name = 'debug-dojo&gt; '</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Prompt name for the debugger, used in the REPL.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig","title":"<code>DebugpyConfig</code>","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Configuration for debugpy debugger.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class DebugpyConfig(BaseConfig):\n    \"\"\"Configuration for debugpy debugger.\"\"\"\n\n    port: int = 1992\n    \"\"\"Port for debugpy debugger.\"\"\"\n    host: str = \"localhost\"\n    \"\"\"Host for debugpy debugger.\"\"\"\n    wait_for_client: bool = True\n    \"\"\"Whether to wait for the client to connect before starting debugging.\"\"\"\n    log_to_file: bool = False\n    \"\"\"Whether to log debugpy output to a file.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.host","title":"<code>host = 'localhost'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Host for debugpy debugger.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.log_to_file","title":"<code>log_to_file = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to log debugpy output to a file.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.port","title":"<code>port = 1992</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Port for debugpy debugger.</p>"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.wait_for_client","title":"<code>wait_for_client = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to wait for the client to connect before starting debugging.</p>"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig","title":"<code>ExceptionsConfig</code>","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Configuration for exceptions handling.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class ExceptionsConfig(BaseConfig):\n    \"\"\"Configuration for exceptions handling.\"\"\"\n\n    rich_traceback: bool = True\n    \"\"\"Enable rich traceback for better error reporting.\"\"\"\n    locals_in_traceback: bool = False\n    \"\"\"Include local variables in traceback.\"\"\"\n    post_mortem: bool = True\n    \"\"\"Enable post-mortem debugging after an exception.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.locals_in_traceback","title":"<code>locals_in_traceback = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Include local variables in traceback.</p>"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.post_mortem","title":"<code>post_mortem = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable post-mortem debugging after an exception.</p>"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.rich_traceback","title":"<code>rich_traceback = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable rich traceback for better error reporting.</p>"},{"location":"api-reference/#debug_dojo._config_models.Features","title":"<code>Features</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for installing debug features.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class Features(BaseModel):\n    \"\"\"Configuration for installing debug features.\"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\")  # pyright: ignore[reportUnannotatedClassAttribute]\n\n    rich_inspect: bool = True\n    \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\"\n    rich_print: bool = True\n    \"\"\"Install rich print as 'p' for enhanced printing.\"\"\"\n    rich_traceback: bool = True\n    \"\"\"Install rich traceback for better error reporting.\"\"\"\n    comparer: bool = True\n    \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\"\n    breakpoint: bool = True\n    \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.Features.breakpoint","title":"<code>breakpoint = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install breakpoint as \u2018b\u2019 for setting breakpoints in code.</p>"},{"location":"api-reference/#debug_dojo._config_models.Features.comparer","title":"<code>comparer = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install comparer as \u2018c\u2019 for side-by-side object comparison.</p>"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_inspect","title":"<code>rich_inspect = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install rich inspect as \u2018i\u2019 for enhanced object inspection.</p>"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_print","title":"<code>rich_print = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install rich print as \u2018p\u2019 for enhanced printing.</p>"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_traceback","title":"<code>rich_traceback = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install rich traceback for better error reporting.</p>"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig","title":"<code>FeaturesConfig</code>","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Configuration for installing debug features.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class FeaturesConfig(BaseConfig):\n    \"\"\"Configuration for installing debug features.\"\"\"\n\n    rich_inspect: str = \"i\"\n    \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\"\n    rich_print: str = \"p\"\n    \"\"\"Install rich print as 'p' for enhanced printing.\"\"\"\n    comparer: str = \"c\"\n    \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\"\n    breakpoint: str = \"b\"\n    \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.breakpoint","title":"<code>breakpoint = 'b'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install breakpoint as \u2018b\u2019 for setting breakpoints in code.</p>"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.comparer","title":"<code>comparer = 'c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install comparer as \u2018c\u2019 for side-by-side object comparison.</p>"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.rich_inspect","title":"<code>rich_inspect = 'i'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install rich inspect as \u2018i\u2019 for enhanced object inspection.</p>"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.rich_print","title":"<code>rich_print = 'p'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Install rich print as \u2018p\u2019 for enhanced printing.</p>"},{"location":"api-reference/#debug_dojo._config_models.IpdbConfig","title":"<code>IpdbConfig</code>","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Configuration for ipdb debugger.</p> Source code in <code>src/debug_dojo/_config_models.py</code> <pre><code>class IpdbConfig(BaseConfig):\n    \"\"\"Configuration for ipdb debugger.\"\"\"\n\n    context_lines: int = 20\n    \"\"\"Number of context lines to show in ipdb.\"\"\"\n</code></pre>"},{"location":"api-reference/#debug_dojo._config_models.IpdbConfig.context_lines","title":"<code>context_lines = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of context lines to show in ipdb.</p>"},{"location":"api-reference/#debug_dojo._cli.display_config","title":"<code>display_config(config)</code>","text":"<p>Display the configuration for the debug dojo.</p> Source code in <code>src/debug_dojo/_cli.py</code> <pre><code>def display_config(config: DebugDojoConfig) -&gt; None:\n    \"\"\"Display the configuration for the debug dojo.\"\"\"\n    rich_print(\"[blue]Using debug-dojo configuration:[/blue]\")\n    rich_print(config.model_dump_json(indent=4))\n</code></pre>"},{"location":"api-reference/#debug_dojo._cli.execute_with_debug","title":"<code>execute_with_debug(target_name, target_args, *, target_is_module, verbose, config)</code>","text":"<p>Execute a target script or module with installation of debugging tools.</p> Source code in <code>src/debug_dojo/_cli.py</code> <pre><code>def execute_with_debug(  # noqa: C901\n    target_name: str,\n    target_args: list[str],\n    *,\n    target_is_module: bool,\n    verbose: bool,\n    config: DebugDojoConfig,\n) -&gt; None:\n    \"\"\"Execute a target script or module with installation of debugging tools.\"\"\"\n    sys.argv = [target_name, *target_args]\n\n    if verbose:\n        rich_print(f\"[blue]Installing debugging tools for {target_name}.[/blue]\")\n        rich_print(f\"[blue]Arguments for target: {target_args}[/blue]\")\n\n    install_by_config(config)\n\n    if target_is_module:\n        runner = runpy.run_module\n    else:\n        if not Path(target_name).exists():\n            sys.exit(1)\n        runner = runpy.run_path\n\n    try:\n        _ = runner(target_name, run_name=\"__main__\")\n    except ImportError as e:\n        rich_print(f\"[red]Error importing {target_name}:[/red]\\n{e}\")\n        sys.exit(1)\n    except BdbQuit:\n        rich_print(\"[red]Debugging session terminated by user.[/red]\")\n        sys.exit(0)\n    except KeyboardInterrupt:\n        rich_print(\"[red]Execution interrupted by user.[/red]\")\n        sys.exit(0)\n    except SystemExit as e:\n        if e.code:\n            rich_print(f\"[red]Script exited with code {e.code}.[/red]\")\n    except Exception as e:  # noqa: BLE001\n        rich_print(f\"[red]Error while running {target_name}:[/red]\\n{e}\")\n        if config.exceptions.post_mortem:\n            import pdb  # noqa: PLC0415, T100\n\n            rich_print(\"[blue]Entering post-mortem debugging session...[/blue]\")\n            pdb.post_mortem(e.__traceback__)\n        sys.exit(1)\n</code></pre>"},{"location":"api-reference/#debug_dojo._cli.main","title":"<code>main()</code>","text":"<p>Run the command-line interface.</p> Source code in <code>src/debug_dojo/_cli.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Run the command-line interface.\"\"\"\n    cli()\n</code></pre>"},{"location":"api-reference/#debug_dojo._cli.run_debug","title":"<code>run_debug(ctx, target_name=None, *, config_path=None, debugger=None, verbose=False, module=False)</code>","text":"<p>Run the command-line interface.</p> Source code in <code>src/debug_dojo/_cli.py</code> <pre><code>@cli.command(\n    help=\"Run a Python script or module with debugging tools installed.\",\n    no_args_is_help=True,\n    context_settings={\"allow_extra_args\": True, \"ignore_unknown_options\": True},\n)\ndef run_debug(  # noqa: PLR0913\n    ctx: typer.Context,\n    target_name: Annotated[\n        str | None, typer.Argument(help=\"The target script or module to debug.\")\n    ] = None,\n    *,\n    config_path: Annotated[\n        Path | None, typer.Option(\"--config\", \"-c\", help=\"Show configuration\")\n    ] = None,\n    debugger: Annotated[\n        DebuggerType | None,\n        typer.Option(\"--debugger\", \"-d\", help=\"Specify the debugger to use\"),\n    ] = None,\n    verbose: Annotated[\n        bool,\n        typer.Option(\"--verbose\", \"-v\", is_flag=True, help=\"Enable verbose output\"),\n    ] = False,\n    module: Annotated[\n        bool,\n        typer.Option(\"--module\", \"-m\", is_flag=True, help=\"Run as a module\"),\n    ] = False,\n) -&gt; None:\n    \"\"\"Run the command-line interface.\"\"\"\n    config = load_config(config_path, verbose=verbose, debugger=debugger)\n\n    if verbose:\n        display_config(config)\n\n    if target_name:\n        execute_with_debug(\n            target_name=target_name,\n            target_is_module=module,\n            target_args=ctx.args,\n            verbose=verbose,\n            config=config,\n        )\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v041-2025-08-16","title":"v0.4.1 (2025-08-16)","text":"<p>release tag: v0.4.1</p> <ul> <li>Mkdocs documentation at debug dojo.</li> </ul>"},{"location":"changelog/#v040-2025-08-10","title":"v0.4.0 (2025-08-10)","text":"<p>release tag: v0.4.0</p> <ul> <li>New configuration model <code>DebugDojoConfig</code> for better structure.</li> <li>Added support for <code>debugger</code> configuration in <code>dojo.toml</code>.</li> <li>Updated <code>dojo</code> command to include debugger type in command call.</li> <li>Configuration versioning allows for in-flight migration of old configurations.</li> <li>Improved error handling in configuration loading.</li> <li>Improved catching errors from target execution.</li> </ul>"},{"location":"changelog/#v032-2025-07-28","title":"v0.3.2 (2025-07-28)","text":"<p>release tag: v0.3.2</p> <ul> <li>New logo for the project.</li> <li>Typer used for CLI implementation.</li> <li>Dojo is configured via <code>dojo.toml</code> or <code>pyproject.toml</code>.</li> <li>Support for <code>debugpy</code> and <code>ipdb</code> for debugging.</li> <li>Fixed documentation and history.</li> </ul>"},{"location":"changelog/#v020-2025-07-20","title":"v0.2.0 (2025-07-20)","text":"<p>release tag: v0.2.0</p> <ul> <li>Added <code>dojo</code> command for easy debugging setup.</li> <li>Added <code>p()</code> function for rich printing.</li> <li>Added history file for tracking changes.</li> <li>Moved to <code>hatch</code> for building and packaging.</li> <li>Fixed <code>pyproject.toml</code> to point to GitHub repository as the homepage.</li> </ul>"},{"location":"changelog/#v010-2025-07-19","title":"v0.1.0 (2025-07-19)","text":"<p>release tag: v0.1.0</p> <ul> <li>Initial module to install debugging tools.</li> <li>Debug mode utilities for PuDB, rich tracebacks, and object inspection.</li> </ul>"},{"location":"cli-reference/","title":"CLI Reference","text":""},{"location":"cli-reference/#usage","title":"Usage","text":"<p>Run your Python script with debugging tools enabled using the <code>debug-dojo</code> command:</p> <pre><code>dojo my_script.py\n</code></pre> <p>You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported:</p> <pre><code>dojo --debugger ipdb --config dojo.toml --verbose --module my_module\n</code></pre>"},{"location":"cli-reference/#dojo","title":"dojo","text":"<p>Run a Python script or module with debugging tools installed.</p>"},{"location":"cli-reference/#usage_1","title":"Usage","text":"<p><code>dojo [OPTIONS][TARGET_NAME]</code></p>"},{"location":"cli-reference/#arguments","title":"Arguments","text":"Name Description Required <code>[TARGET_NAME]</code> The target script or module to debug. No"},{"location":"cli-reference/#options","title":"Options","text":"Name Description Required Default <code>-c, \u2013config PATH</code> Show configuration No - <code>-d, \u2013debugger [pdb|pudb|ipdb|debugpy]</code> Specify the debugger to use No - <code>-v, \u2013verbose</code> Enable verbose output No - <code>-m, \u2013module</code> Run as a module No - <code>\u2013install-completion</code> Install completion for the current shell. No - <code>\u2013show-completion</code> Show completion for the current shell, to copy it or customize the installation. No - <code>\u2013help</code> Show this message and exit. No -"},{"location":"cli-reference/#commands","title":"Commands","text":"<p>No commands available</p>"},{"location":"configuration/","title":"Configuration","text":"<p>You can configure the debugging tools using a <code>dojo.toml</code> or <code>pyproject.toml</code> file. The configuration allows you to specify which debugger to use, enable or disable features, and set other options.</p> <p>Example <code>dojo.toml</code>:</p> <pre><code>[debuggers]\n    default = \"ipdb\"\n\n    debugpy = { port = 1992 }\n    ipdb    = { context_lines = 20 }\n\n[exceptions]\n    locals_in_traceback = false\n    post_mortem         = true\n    rich_traceback      = true\n\n[features]\n    breakpoint   = \"b\"\n    # Empty string means disable the feature\n    comparer     = \"\"\n    rich_inspect = \"i\"\n    rich_print   = \"p\"\n</code></pre>"},{"location":"development/","title":"Development and contributing","text":"<p>Project uses <code>poe</code> for defining developer tasks.</p>"},{"location":"development/#lint-and-type-check","title":"Lint and type check","text":"<p>We\u2019re using <code>ruff</code> as formatter and linter and <code>basedpyright</code> for static type checking. You can run all three with simple command:</p> <pre><code>poe code-quality\n</code></pre>"},{"location":"development/#tests","title":"Tests","text":"<p><code>Pytest</code> is used for testing. Currently only few example doc tests are set up.</p> <pre><code>poe test\n</code></pre>"},{"location":"development/#contributing","title":"Contributing","text":"<p>You\u2019re welcome to contribute both new features and fixes. The above quality checks need to pass for a contribution to be accepted to <code>debug-dojo</code>. This is tested with Pull Requests job hook.</p> <p>It is recommended to set up a pre-commit hook based on the included config.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"license/","title":"The MIT License (MIT)","text":"<p>Copyright (c) 2025 to bwrob.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}