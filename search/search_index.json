{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Debug Dojo debug dojo, a place for zen debugging debug-dojo is a Python package providing utilities for enhanced debugging and inspection in the terminal. It leverages rich for beautiful output and offers helpers for side-by-side object comparison, improved tracebacks from rich , and easy integration with different debuggers -- debugpy , pudb , pdb , and ipdb . Features Convenient CLI Quickly run your code with debugging tools enabled. Simple API: Install all tools or only what you need. Debugger integration: Quickly enable Debugpy, PuDB, PDB, or IPDB as your default pre-configured debugger. Rich tracebacks: Get readable, colorized tracebacks for easier debugging. Side-by-side object inspection: Visually compare Python objects, their attributes, and methods in the terminal. Configuration: Easily configure the debugging tools using dojo.toml or pyproject.toml . Usage CLI Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module From the code In the PuDB style, you can install all debugging tools and enter the debugging mode with a single command: object_1 = {\"foo\": 1, \"bar\": 2} object_2 = [1, 2, 3] import debug_dojo.install; b() p(object_1) # Pretty print an object with Rich Features in debugging mode The following functions are available in the debugging mode, injected into builtins: b() is a hook that sets a breakpoint using the configured debugger. p(object_1) is pretty printing of an object using Rich. i(object_1) to inspect an object using Rich. c(object_1, object_2) to compare two objects side-by-side. Configuration You can configure the debugging tools using a dojo.toml or pyproject.toml file. The configuration allows you to specify which debugger to use, enable or disable features, and set other options. Example dojo.toml : [debuggers] default = \"ipdb\" debugpy = { port = 1992 } ipdb = { context_lines = 20 } [exceptions] locals_in_traceback = false post_mortem = true rich_traceback = true [features] breakpoint = \"b\" # Empty string means disable the feature comparer = \"\" rich_inspect = \"i\" rich_print = \"p\" Installation The package is available on PyPI and can be installed using standard Python package management tools. pip install debug-dojo You can also use poetry or uv to add it to your project: poetry add debug-dojo uv add debug-dojo Note that dojo most likely will not work when installed via pipx or uvx , as it relies on the current Python environment dependencies. Development and contributing Project uses poe for defining developer tasks. Lint and type check We're using ruff as formatter and linter and basedpyright for static type checking. You can run all three with simple command: poe code-quality Tests Pytest is used for testing. Currently only few example doc tests are set up. poe test Contributing You're welcome to contribute both new features and fixes. The above quality checks need to pass for a contribution to be accepted to debug-dojo . This is tested with Pull Requests job hook. It is recommended to set up a pre-commit hook based on the included config. pre-commit install","title":"Debug Dojo"},{"location":"#debug-dojo","text":"debug dojo, a place for zen debugging debug-dojo is a Python package providing utilities for enhanced debugging and inspection in the terminal. It leverages rich for beautiful output and offers helpers for side-by-side object comparison, improved tracebacks from rich , and easy integration with different debuggers -- debugpy , pudb , pdb , and ipdb .","title":"Debug Dojo"},{"location":"#features","text":"Convenient CLI Quickly run your code with debugging tools enabled. Simple API: Install all tools or only what you need. Debugger integration: Quickly enable Debugpy, PuDB, PDB, or IPDB as your default pre-configured debugger. Rich tracebacks: Get readable, colorized tracebacks for easier debugging. Side-by-side object inspection: Visually compare Python objects, their attributes, and methods in the terminal. Configuration: Easily configure the debugging tools using dojo.toml or pyproject.toml .","title":"Features"},{"location":"#usage","text":"","title":"Usage"},{"location":"#cli","text":"Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module","title":"CLI"},{"location":"#from-the-code","text":"In the PuDB style, you can install all debugging tools and enter the debugging mode with a single command: object_1 = {\"foo\": 1, \"bar\": 2} object_2 = [1, 2, 3] import debug_dojo.install; b() p(object_1) # Pretty print an object with Rich","title":"From the code"},{"location":"#features-in-debugging-mode","text":"The following functions are available in the debugging mode, injected into builtins: b() is a hook that sets a breakpoint using the configured debugger. p(object_1) is pretty printing of an object using Rich. i(object_1) to inspect an object using Rich. c(object_1, object_2) to compare two objects side-by-side.","title":"Features in debugging mode"},{"location":"#configuration","text":"You can configure the debugging tools using a dojo.toml or pyproject.toml file. The configuration allows you to specify which debugger to use, enable or disable features, and set other options. Example dojo.toml : [debuggers] default = \"ipdb\" debugpy = { port = 1992 } ipdb = { context_lines = 20 } [exceptions] locals_in_traceback = false post_mortem = true rich_traceback = true [features] breakpoint = \"b\" # Empty string means disable the feature comparer = \"\" rich_inspect = \"i\" rich_print = \"p\"","title":"Configuration"},{"location":"#installation","text":"The package is available on PyPI and can be installed using standard Python package management tools. pip install debug-dojo You can also use poetry or uv to add it to your project: poetry add debug-dojo uv add debug-dojo Note that dojo most likely will not work when installed via pipx or uvx , as it relies on the current Python environment dependencies.","title":"Installation"},{"location":"#development-and-contributing","text":"Project uses poe for defining developer tasks.","title":"Development and contributing"},{"location":"#lint-and-type-check","text":"We're using ruff as formatter and linter and basedpyright for static type checking. You can run all three with simple command: poe code-quality","title":"Lint and type check"},{"location":"#tests","text":"Pytest is used for testing. Currently only few example doc tests are set up. poe test","title":"Tests"},{"location":"#contributing","text":"You're welcome to contribute both new features and fixes. The above quality checks need to pass for a contribution to be accepted to debug-dojo . This is tested with Pull Requests job hook. It is recommended to set up a pre-commit hook based on the included config. pre-commit install","title":"Contributing"},{"location":"api-reference/","text":"API Reference Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly. Importing this module will install the debugging tools based on the configuration. Example usage: import debug_dojo.install b() This will install the debugging tools and put debug breakpoint at this line. Another way to use this module is to run the desired script or module with the dojo command-line interface. $ dojo --verbose --config dojo.toml target_script.py --arg_1_for_script value1","title":"Api Reference"},{"location":"api-reference/#api-reference","text":"Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly. Importing this module will install the debugging tools based on the configuration. Example usage: import debug_dojo.install b() This will install the debugging tools and put debug breakpoint at this line. Another way to use this module is to run the desired script or module with the dojo command-line interface. $ dojo --verbose --config dojo.toml target_script.py --arg_1_for_script value1","title":"API Reference"},{"location":"changelog/","text":"Changelog v0.4.0 (2025-08-10) release tag : v0.4.0 New configuration model DebugDojoConfig for better structure. Added support for debugger configuration in dojo.toml . Updated dojo command to include debugger type in command call. Configuration versioning allows for in-flight migration of old configurations. Improved error handling in configuration loading. Improved catching errors from target execution. v0.3.2 (2025-07-28) release tag : v0.3.2 New logo for the project. Typer used for CLI implementation. Dojo is configured via dojo.toml or pyproject.toml . Support for debugpy and ipdb for debugging. Fixed documentation and history. v0.2.0 (2025-07-20) release tag : v0.2.0 Added dojo command for easy debugging setup. Added p() function for rich printing. Added history file for tracking changes. Moved to hatch for building and packaging. Fixed pyproject.toml to point to GitHub repository as the homepage. v0.1.0 (2025-07-19) release tag : v0.1.0 Initial module to install debugging tools. Debug mode utilities for PuDB, rich tracebacks, and object inspection.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v040-2025-08-10","text":"release tag : v0.4.0 New configuration model DebugDojoConfig for better structure. Added support for debugger configuration in dojo.toml . Updated dojo command to include debugger type in command call. Configuration versioning allows for in-flight migration of old configurations. Improved error handling in configuration loading. Improved catching errors from target execution.","title":"v0.4.0 (2025-08-10)"},{"location":"changelog/#v032-2025-07-28","text":"release tag : v0.3.2 New logo for the project. Typer used for CLI implementation. Dojo is configured via dojo.toml or pyproject.toml . Support for debugpy and ipdb for debugging. Fixed documentation and history.","title":"v0.3.2 (2025-07-28)"},{"location":"changelog/#v020-2025-07-20","text":"release tag : v0.2.0 Added dojo command for easy debugging setup. Added p() function for rich printing. Added history file for tracking changes. Moved to hatch for building and packaging. Fixed pyproject.toml to point to GitHub repository as the homepage.","title":"v0.2.0 (2025-07-20)"},{"location":"changelog/#v010-2025-07-19","text":"release tag : v0.1.0 Initial module to install debugging tools. Debug mode utilities for PuDB, rich tracebacks, and object inspection.","title":"v0.1.0 (2025-07-19)"},{"location":"cli-reference/","text":"CLI Reference dojo Run a Python script or module with debugging tools installed. Usage dojo [OPTIONS][TARGET_NAME] Arguments Name Description Required [TARGET_NAME] The target script or module to debug. No Options Name Description Required Default -c, --config PATH Show configuration No - -d, --debugger [pdb|pudb|ipdb|debugpy] Specify the debugger to use No - -v, --verbose Enable verbose output No - -m, --module Run as a module No - --install-completion Install completion for the current shell. No - --show-completion Show completion for the current shell, to copy it or customize the installation. No - --help Show this message and exit. No - Commands No commands available","title":"CLI Reference"},{"location":"cli-reference/#cli-reference","text":"","title":"CLI Reference"},{"location":"cli-reference/#dojo","text":"Run a Python script or module with debugging tools installed.","title":"dojo"},{"location":"cli-reference/#usage","text":"dojo [OPTIONS][TARGET_NAME]","title":"Usage"},{"location":"cli-reference/#arguments","text":"Name Description Required [TARGET_NAME] The target script or module to debug. No","title":"Arguments"},{"location":"cli-reference/#options","text":"Name Description Required Default -c, --config PATH Show configuration No - -d, --debugger [pdb|pudb|ipdb|debugpy] Specify the debugger to use No - -v, --verbose Enable verbose output No - -m, --module Run as a module No - --install-completion Install completion for the current shell. No - --show-completion Show completion for the current shell, to copy it or customize the installation. No - --help Show this message and exit. No -","title":"Options"},{"location":"cli-reference/#commands","text":"No commands available","title":"Commands"},{"location":"license/","text":"The MIT License (MIT) Copyright (c) 2025 to bwrob. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#the-mit-license-mit","text":"Copyright (c) 2025 to bwrob. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}