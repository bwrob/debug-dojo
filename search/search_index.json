{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Debug Dojo \u00b6 debug dojo, a place for zen debugging debug-dojo is a Python package providing utilities for enhanced debugging and inspection in the terminal. It leverages rich for beautiful output and offers helpers for side-by-side object comparison, improved tracebacks from rich , and easy integration with different debuggers \u2013 debugpy , pudb , pdb , and ipdb . Features \u00b6 Convenient CLI Quickly run your code with debugging tools enabled. Simple API: Install all tools or only what you need. Debugger integration: Quickly enable Debugpy, PuDB, PDB, or IPDB as your default pre-configured debugger. Rich tracebacks: Get readable, colorized tracebacks for easier debugging. Side-by-side object inspection: Visually compare Python objects, their attributes, and methods in the terminal. Configuration: Easily configure the debugging tools using dojo.toml or pyproject.toml . Usage \u00b6 CLI \u00b6 Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module From the code \u00b6 In the PuDB style, you can install all debugging tools and enter the debugging mode with a single command: object_1 = {\"foo\": 1, \"bar\": 2} object_2 = [1, 2, 3] import debug_dojo.install; b() p(object_1) # Pretty print an object with Rich Features in debugging mode \u00b6 The following functions are available in the debugging mode, injected into builtins: b() is a hook that sets a breakpoint using the configured debugger. p(object_1) is pretty printing of an object using Rich. i(object_1) to inspect an object using Rich. c(object_1, object_2) to compare two objects side-by-side. Installation \u00b6 The package is available on PyPI and can be installed using standard Python package management tools. pip install debug-dojo You can also use poetry or uv to add it to your project: poetry add debug-dojo uv add debug-dojo Note that dojo most likely will not work when installed via pipx or uvx , as it relies on the current Python environment dependencies.","title":"Debug Dojo"},{"location":"#debug-dojo","text":"debug dojo, a place for zen debugging debug-dojo is a Python package providing utilities for enhanced debugging and inspection in the terminal. It leverages rich for beautiful output and offers helpers for side-by-side object comparison, improved tracebacks from rich , and easy integration with different debuggers \u2013 debugpy , pudb , pdb , and ipdb .","title":"Debug Dojo"},{"location":"#features","text":"Convenient CLI Quickly run your code with debugging tools enabled. Simple API: Install all tools or only what you need. Debugger integration: Quickly enable Debugpy, PuDB, PDB, or IPDB as your default pre-configured debugger. Rich tracebacks: Get readable, colorized tracebacks for easier debugging. Side-by-side object inspection: Visually compare Python objects, their attributes, and methods in the terminal. Configuration: Easily configure the debugging tools using dojo.toml or pyproject.toml .","title":"Features"},{"location":"#usage","text":"","title":"Usage"},{"location":"#cli","text":"Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module","title":"CLI"},{"location":"#from-the-code","text":"In the PuDB style, you can install all debugging tools and enter the debugging mode with a single command: object_1 = {\"foo\": 1, \"bar\": 2} object_2 = [1, 2, 3] import debug_dojo.install; b() p(object_1) # Pretty print an object with Rich","title":"From the code"},{"location":"#features-in-debugging-mode","text":"The following functions are available in the debugging mode, injected into builtins: b() is a hook that sets a breakpoint using the configured debugger. p(object_1) is pretty printing of an object using Rich. i(object_1) to inspect an object using Rich. c(object_1, object_2) to compare two objects side-by-side.","title":"Features in debugging mode"},{"location":"#installation","text":"The package is available on PyPI and can be installed using standard Python package management tools. pip install debug-dojo You can also use poetry or uv to add it to your project: poetry add debug-dojo uv add debug-dojo Note that dojo most likely will not work when installed via pipx or uvx , as it relies on the current Python environment dependencies.","title":"Installation"},{"location":"api-reference/","text":"API Reference \u00b6 Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly. Importing this module will install the debugging tools based on the configuration. Example usage: import debug_dojo.install b() This will install the debugging tools and put debug breakpoint at this line. Another way to use this module is to run the desired script or module with the dojo command-line interface. $ dojo --verbose --config dojo.toml target_script.py --arg_1_for_script value1 Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly. install_by_config ( config ) \u00b6 Install debugging tools. Source code in src/debug_dojo/_installers.py 172 173 174 175 176 def install_by_config ( config : DebugDojoConfig ) -> None : \"\"\"Install debugging tools.\"\"\" _set_debugger ( config . debuggers ) _set_exceptions ( config . exceptions ) _install_features ( config . features ) Utilities for side-by-side inspection and comparison of Python objects using Rich. This module provides functions to display attributes and methods of two objects in a visually appealing, side-by-side format in the terminal. inspect_objects_side_by_side ( obj1 , obj2 ) \u00b6 Display two Python objects side-by-side in the terminal using Rich. Showing their attributes and methods in a simplified, aligned format. Source code in src/debug_dojo/_compareres.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def inspect_objects_side_by_side ( obj1 : object , obj2 : object , ) -> None : \"\"\"Display two Python objects side-by-side in the terminal using Rich. Showing their attributes and methods in a simplified, aligned format. \"\"\" main_console : Console = Console () lines1 : list [ Text ] = _get_simplified_object_info ( obj1 ) lines2 : list [ Text ] = _get_simplified_object_info ( obj2 ) # Determine the maximum number of lines to ensure consistent height max_lines : int = max ( len ( lines1 ), len ( lines2 )) # Pad the shorter list of lines with empty Text objects to match the height if len ( lines1 ) < max_lines : lines1 . extend ([ Text ( \"\" )] * ( max_lines - len ( lines1 ))) if len ( lines2 ) < max_lines : lines2 . extend ([ Text ( \"\" )] * ( max_lines - len ( lines2 ))) # Join the padded lines into a single Text object for the Panel content padded_inspect_text1 : Text = Text ( \" \\n \" ) . join ( lines1 ) padded_inspect_text2 : Text = Text ( \" \\n \" ) . join ( lines2 ) panel1 : Panel = Panel ( padded_inspect_text1 , border_style = \"green\" , expand = True ) panel2 : Panel = Panel ( padded_inspect_text2 , border_style = \"green\" , expand = True ) main_console . print ( Columns ([ panel1 , panel2 ])) Debug Dojo configuration module. It includes configurations for different debuggers, exception handling, and features that can be enabled or disabled. __filter_pydantic_error_msg ( error ) \u00b6 Filter out specific lines from a Pydantic validation error. Source code in src/debug_dojo/_config.py 26 27 28 29 30 31 32 def __filter_pydantic_error_msg ( error : ValidationError ) -> str : \"\"\"Filter out specific lines from a Pydantic validation error.\"\"\" return \" \\n \" . join ( line for line in str ( error ) . splitlines () if not line . startswith ( \"For further information visit\" ) ) load_config ( config_path = None , * , verbose = False , debugger = None ) \u00b6 Load the Debug Dojo configuration and return a DebugDojoConfig instance. Source code in src/debug_dojo/_config.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def load_config ( # noqa: C901 config_path : Path | None = None , * , verbose : bool = False , debugger : DebuggerType | None = None , ) -> DebugDojoConfig : \"\"\"Load the Debug Dojo configuration and return a DebugDojoConfig instance.\"\"\" resolved_path = resolve_config_path ( config_path ) if verbose : if resolved_path : msg = f \"Using configuration file: { resolved_path } .\" else : msg = \"No configuration file found, using default settings.\" rich_print ( f \"[blue] { msg } [/blue]\" ) if not resolved_path : return DebugDojoConfig () raw_config = load_raw_config ( resolved_path ) config = None for model in ( DebugDojoConfigV2 , DebugDojoConfigV1 ): model_name = model . __name__ try : config = model . model_validate ( raw_config ) except ValidationError as e : if verbose : msg = ( f \"[yellow]Configuration validation error for { model_name } : \\n \" f \" { __filter_pydantic_error_msg ( e ) } \\n\\n \" f \"Please check your configuration file { resolved_path } .[/yellow]\" ) rich_print ( msg ) else : if verbose or model_name != DebugDojoConfig . __name__ : msg = ( f \"[blue]Using configuration model: { model_name } . \\n \" f \"Current configuration model { DebugDojoConfig . __name__ } . [/blue]\" ) rich_print ( msg ) break if not config : msg = ( f \"[red]Unsupported configuration version in { resolved_path . resolve () } . \\n \" \"Please update your configuration file.[/red]\" ) rich_print ( msg ) sys . exit ( 1 ) while not isinstance ( config , DebugDojoConfig ): config = config . update () # If a debugger is specified, update the config. if debugger : config . debuggers . default = debugger return config load_raw_config ( config_path ) \u00b6 Load the Debug Dojo configuration from a file. Currently supports \u2018dojo.toml\u2019 or \u2018pyproject.toml\u2019. If no path is provided, it checks the current directory for these files. Source code in src/debug_dojo/_config.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def load_raw_config ( config_path : Path , ) -> dict [ str , Any ]: # pyright: ignore[reportExplicitAny] \"\"\"Load the Debug Dojo configuration from a file. Currently supports 'dojo.toml' or 'pyproject.toml'. If no path is provided, it checks the current directory for these files. \"\"\" config_str = config_path . read_text ( encoding = \"utf-8\" ) try : config_data = parse ( config_str ) . unwrap () except TOMLKitError as e : msg = f \"Error parsing configuration file { config_path . resolve () } .\" raise ValueError ( msg ) from e # If config is in [tool.debug_dojo] (pyproject.toml), extract it. if config_path . name == \"pyproject.toml\" : try : dojo_config = cast ( \"dict[str, Any]\" , config_data [ \"tool\" ][ \"debug_dojo\" ]) except KeyError : return {} else : return dojo_config return config_data resolve_config_path ( config_path ) \u00b6 Resolve the configuration path, returning a default if none is provided. Source code in src/debug_dojo/_config.py 35 36 37 38 39 40 41 42 43 44 45 46 47 def resolve_config_path ( config_path : Path | None ) -> Path | None : \"\"\"Resolve the configuration path, returning a default if none is provided.\"\"\" if config_path : if not config_path . exists (): msg = f \"Configuration file not found: \\n { config_path . resolve () } \" raise FileNotFoundError ( msg ) return config_path . resolve () # Default configuration path for path in ( Path ( \"dojo.toml\" ), Path ( \"pyproject.toml\" )): if path . exists (): return path . resolve () return None BaseConfig \u00b6 Bases: BaseModel Base configuration class with extra fields forbidden. Source code in src/debug_dojo/_config_models.py 8 9 10 11 class BaseConfig ( BaseModel ): \"\"\"Base configuration class with extra fields forbidden.\"\"\" model_config = ConfigDict ( extra = \"forbid\" , validate_assignment = True ) DebugDojoConfigV1 \u00b6 Bases: BaseModel Configuration for Debug Dojo. Source code in src/debug_dojo/_config_models.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class DebugDojoConfigV1 ( BaseModel ): \"\"\"Configuration for Debug Dojo.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] debugger : DebuggerType = DebuggerType . PUDB \"\"\"The type of debugger to use.\"\"\" features : Features = Features () \"\"\"Features to install for debugging.\"\"\" def update ( self ) -> DebugDojoConfigV2 : \"\"\"Update the configuration to the latest version.\"\"\" v2_exceptions = ExceptionsConfig ( rich_traceback = self . features . rich_traceback , ) v2_debuggers = DebuggersConfig ( default = self . debugger ) v2_features = FeaturesConfig ( rich_inspect = \"i\" if self . features . rich_inspect else \"\" , rich_print = \"p\" if self . features . rich_print else \"\" , comparer = \"c\" if self . features . comparer else \"\" , breakpoint = \"b\" if self . features . breakpoint else \"\" , ) return DebugDojoConfigV2 ( exceptions = v2_exceptions , debuggers = v2_debuggers , features = v2_features , ) debugger = DebuggerType . PUDB class-attribute instance-attribute \u00b6 The type of debugger to use. features = Features () class-attribute instance-attribute \u00b6 Features to install for debugging. update () \u00b6 Update the configuration to the latest version. Source code in src/debug_dojo/_config_models.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def update ( self ) -> DebugDojoConfigV2 : \"\"\"Update the configuration to the latest version.\"\"\" v2_exceptions = ExceptionsConfig ( rich_traceback = self . features . rich_traceback , ) v2_debuggers = DebuggersConfig ( default = self . debugger ) v2_features = FeaturesConfig ( rich_inspect = \"i\" if self . features . rich_inspect else \"\" , rich_print = \"p\" if self . features . rich_print else \"\" , comparer = \"c\" if self . features . comparer else \"\" , breakpoint = \"b\" if self . features . breakpoint else \"\" , ) return DebugDojoConfigV2 ( exceptions = v2_exceptions , debuggers = v2_debuggers , features = v2_features , ) DebugDojoConfigV2 \u00b6 Bases: BaseModel Configuration for Debug Dojo. Source code in src/debug_dojo/_config_models.py 126 127 128 129 130 131 132 133 134 135 class DebugDojoConfigV2 ( BaseModel ): \"\"\"Configuration for Debug Dojo.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] exceptions : ExceptionsConfig = ExceptionsConfig () debuggers : DebuggersConfig = DebuggersConfig () \"\"\"Default debugger and configs.\"\"\" features : FeaturesConfig = FeaturesConfig () \"\"\"Features mnemonics .\"\"\" debuggers = DebuggersConfig () class-attribute instance-attribute \u00b6 Default debugger and configs. features = FeaturesConfig () class-attribute instance-attribute \u00b6 Features mnemonics . DebuggerType \u00b6 Bases: Enum Enum for different types of debuggers. Source code in src/debug_dojo/_config_models.py 14 15 16 17 18 19 20 class DebuggerType ( Enum ): \"\"\"Enum for different types of debuggers.\"\"\" PDB = \"pdb\" PUDB = \"pudb\" IPDB = \"ipdb\" DEBUGPY = \"debugpy\" DebuggersConfig \u00b6 Bases: BaseConfig Configuration for debuggers. Source code in src/debug_dojo/_config_models.py 60 61 62 63 64 65 66 67 68 69 70 class DebuggersConfig ( BaseConfig ): \"\"\"Configuration for debuggers.\"\"\" default : DebuggerType = DebuggerType . IPDB \"\"\"Default debugger to use.\"\"\" prompt_name : str = \"debug-dojo> \" \"\"\"Prompt name for the debugger, used in the REPL.\"\"\" debugpy : DebugpyConfig = DebugpyConfig () \"\"\"Configuration for debugpy debugger.\"\"\" ipdb : IpdbConfig = IpdbConfig () \"\"\"Configuration for ipdb debugger.\"\"\" debugpy = DebugpyConfig () class-attribute instance-attribute \u00b6 Configuration for debugpy debugger. default = DebuggerType . IPDB class-attribute instance-attribute \u00b6 Default debugger to use. ipdb = IpdbConfig () class-attribute instance-attribute \u00b6 Configuration for ipdb debugger. prompt_name = 'debug-dojo> ' class-attribute instance-attribute \u00b6 Prompt name for the debugger, used in the REPL. DebugpyConfig \u00b6 Bases: BaseConfig Configuration for debugpy debugger. Source code in src/debug_dojo/_config_models.py 40 41 42 43 44 45 46 47 48 49 50 class DebugpyConfig ( BaseConfig ): \"\"\"Configuration for debugpy debugger.\"\"\" port : int = 1992 \"\"\"Port for debugpy debugger.\"\"\" host : str = \"localhost\" \"\"\"Host for debugpy debugger.\"\"\" wait_for_client : bool = True \"\"\"Whether to wait for the client to connect before starting debugging.\"\"\" log_to_file : bool = False \"\"\"Whether to log debugpy output to a file.\"\"\" host = 'localhost' class-attribute instance-attribute \u00b6 Host for debugpy debugger. log_to_file = False class-attribute instance-attribute \u00b6 Whether to log debugpy output to a file. port = 1992 class-attribute instance-attribute \u00b6 Port for debugpy debugger. wait_for_client = True class-attribute instance-attribute \u00b6 Whether to wait for the client to connect before starting debugging. ExceptionsConfig \u00b6 Bases: BaseConfig Configuration for exceptions handling. Source code in src/debug_dojo/_config_models.py 73 74 75 76 77 78 79 80 81 class ExceptionsConfig ( BaseConfig ): \"\"\"Configuration for exceptions handling.\"\"\" rich_traceback : bool = True \"\"\"Enable rich traceback for better error reporting.\"\"\" locals_in_traceback : bool = False \"\"\"Include local variables in traceback.\"\"\" post_mortem : bool = True \"\"\"Enable post-mortem debugging after an exception.\"\"\" locals_in_traceback = False class-attribute instance-attribute \u00b6 Include local variables in traceback. post_mortem = True class-attribute instance-attribute \u00b6 Enable post-mortem debugging after an exception. rich_traceback = True class-attribute instance-attribute \u00b6 Enable rich traceback for better error reporting. Features \u00b6 Bases: BaseModel Configuration for installing debug features. Source code in src/debug_dojo/_config_models.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Features ( BaseModel ): \"\"\"Configuration for installing debug features.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] rich_inspect : bool = True \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\" rich_print : bool = True \"\"\"Install rich print as 'p' for enhanced printing.\"\"\" rich_traceback : bool = True \"\"\"Install rich traceback for better error reporting.\"\"\" comparer : bool = True \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\" breakpoint : bool = True \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\" breakpoint = True class-attribute instance-attribute \u00b6 Install breakpoint as \u2018b\u2019 for setting breakpoints in code. comparer = True class-attribute instance-attribute \u00b6 Install comparer as \u2018c\u2019 for side-by-side object comparison. rich_inspect = True class-attribute instance-attribute \u00b6 Install rich inspect as \u2018i\u2019 for enhanced object inspection. rich_print = True class-attribute instance-attribute \u00b6 Install rich print as \u2018p\u2019 for enhanced printing. rich_traceback = True class-attribute instance-attribute \u00b6 Install rich traceback for better error reporting. FeaturesConfig \u00b6 Bases: BaseConfig Configuration for installing debug features. Source code in src/debug_dojo/_config_models.py 84 85 86 87 88 89 90 91 92 93 94 class FeaturesConfig ( BaseConfig ): \"\"\"Configuration for installing debug features.\"\"\" rich_inspect : str = \"i\" \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\" rich_print : str = \"p\" \"\"\"Install rich print as 'p' for enhanced printing.\"\"\" comparer : str = \"c\" \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\" breakpoint : str = \"b\" \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\" breakpoint = 'b' class-attribute instance-attribute \u00b6 Install breakpoint as \u2018b\u2019 for setting breakpoints in code. comparer = 'c' class-attribute instance-attribute \u00b6 Install comparer as \u2018c\u2019 for side-by-side object comparison. rich_inspect = 'i' class-attribute instance-attribute \u00b6 Install rich inspect as \u2018i\u2019 for enhanced object inspection. rich_print = 'p' class-attribute instance-attribute \u00b6 Install rich print as \u2018p\u2019 for enhanced printing. IpdbConfig \u00b6 Bases: BaseConfig Configuration for ipdb debugger. Source code in src/debug_dojo/_config_models.py 53 54 55 56 57 class IpdbConfig ( BaseConfig ): \"\"\"Configuration for ipdb debugger.\"\"\" context_lines : int = 20 \"\"\"Number of context lines to show in ipdb.\"\"\" context_lines = 20 class-attribute instance-attribute \u00b6 Number of context lines to show in ipdb. Command-line interface for running Python scripts or modules with debugging tools. display_config ( config ) \u00b6 Display the configuration for the debug dojo. Source code in src/debug_dojo/_cli.py 72 73 74 75 def display_config ( config : DebugDojoConfig ) -> None : \"\"\"Display the configuration for the debug dojo.\"\"\" rich_print ( \"[blue]Using debug-dojo configuration:[/blue]\" ) rich_print ( config . model_dump_json ( indent = 4 )) execute_with_debug ( target_name , target_args , * , target_is_module , verbose , config ) \u00b6 Execute a target script or module with installation of debugging tools. Source code in src/debug_dojo/_cli.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def execute_with_debug ( # noqa: C901 target_name : str , target_args : list [ str ], * , target_is_module : bool , verbose : bool , config : DebugDojoConfig , ) -> None : \"\"\"Execute a target script or module with installation of debugging tools.\"\"\" sys . argv = [ target_name , * target_args ] if verbose : rich_print ( f \"[blue]Installing debugging tools for { target_name } .[/blue]\" ) rich_print ( f \"[blue]Arguments for target: { target_args } [/blue]\" ) install_by_config ( config ) if target_is_module : runner = runpy . run_module else : if not Path ( target_name ) . exists (): sys . exit ( 1 ) runner = runpy . run_path try : _ = runner ( target_name , run_name = \"__main__\" ) except ImportError as e : rich_print ( f \"[red]Error importing { target_name } :[/red] \\n { e } \" ) sys . exit ( 1 ) except BdbQuit : rich_print ( \"[red]Debugging session terminated by user.[/red]\" ) sys . exit ( 0 ) except KeyboardInterrupt : rich_print ( \"[red]Execution interrupted by user.[/red]\" ) sys . exit ( 0 ) except SystemExit as e : if e . code : rich_print ( f \"[red]Script exited with code { e . code } .[/red]\" ) except Exception as e : # noqa: BLE001 rich_print ( f \"[red]Error while running { target_name } :[/red] \\n { e } \" ) if config . exceptions . post_mortem : import pdb # noqa: PLC0415, T100 rich_print ( \"[blue]Entering post-mortem debugging session...[/blue]\" ) pdb . post_mortem ( e . __traceback__ ) sys . exit ( 1 ) main () \u00b6 Run the command-line interface. Source code in src/debug_dojo/_cli.py 121 122 123 def main () -> None : \"\"\"Run the command-line interface.\"\"\" cli () run_debug ( ctx , target_name = None , * , config_path = None , debugger = None , verbose = False , module = False ) \u00b6 Run the command-line interface. Source code in src/debug_dojo/_cli.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @cli . command ( help = \"Run a Python script or module with debugging tools installed.\" , no_args_is_help = True , context_settings = { \"allow_extra_args\" : True , \"ignore_unknown_options\" : True }, ) def run_debug ( # noqa: PLR0913 ctx : typer . Context , target_name : Annotated [ str | None , typer . Argument ( help = \"The target script or module to debug.\" ) ] = None , * , config_path : Annotated [ Path | None , typer . Option ( \"--config\" , \"-c\" , help = \"Show configuration\" ) ] = None , debugger : Annotated [ DebuggerType | None , typer . Option ( \"--debugger\" , \"-d\" , help = \"Specify the debugger to use\" ), ] = None , verbose : Annotated [ bool , typer . Option ( \"--verbose\" , \"-v\" , is_flag = True , help = \"Enable verbose output\" ), ] = False , module : Annotated [ bool , typer . Option ( \"--module\" , \"-m\" , is_flag = True , help = \"Run as a module\" ), ] = False , ) -> None : \"\"\"Run the command-line interface.\"\"\" config = load_config ( config_path , verbose = verbose , debugger = debugger ) if verbose : display_config ( config ) if target_name : execute_with_debug ( target_name = target_name , target_is_module = module , target_args = ctx . args , verbose = verbose , config = config , )","title":"API"},{"location":"api-reference/#api-reference","text":"Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly. Importing this module will install the debugging tools based on the configuration. Example usage: import debug_dojo.install b() This will install the debugging tools and put debug breakpoint at this line. Another way to use this module is to run the desired script or module with the dojo command-line interface. $ dojo --verbose --config dojo.toml target_script.py --arg_1_for_script value1 Debugging tools for Python. This module provides functions to set up debugging tools like PuDB and Rich Traceback. It checks for the availability of these tools and configures them accordingly.","title":"API Reference"},{"location":"api-reference/#debug_dojo._installers.install_by_config","text":"Install debugging tools. Source code in src/debug_dojo/_installers.py 172 173 174 175 176 def install_by_config ( config : DebugDojoConfig ) -> None : \"\"\"Install debugging tools.\"\"\" _set_debugger ( config . debuggers ) _set_exceptions ( config . exceptions ) _install_features ( config . features ) Utilities for side-by-side inspection and comparison of Python objects using Rich. This module provides functions to display attributes and methods of two objects in a visually appealing, side-by-side format in the terminal.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;install_by_config"},{"location":"api-reference/#debug_dojo._compareres.inspect_objects_side_by_side","text":"Display two Python objects side-by-side in the terminal using Rich. Showing their attributes and methods in a simplified, aligned format. Source code in src/debug_dojo/_compareres.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def inspect_objects_side_by_side ( obj1 : object , obj2 : object , ) -> None : \"\"\"Display two Python objects side-by-side in the terminal using Rich. Showing their attributes and methods in a simplified, aligned format. \"\"\" main_console : Console = Console () lines1 : list [ Text ] = _get_simplified_object_info ( obj1 ) lines2 : list [ Text ] = _get_simplified_object_info ( obj2 ) # Determine the maximum number of lines to ensure consistent height max_lines : int = max ( len ( lines1 ), len ( lines2 )) # Pad the shorter list of lines with empty Text objects to match the height if len ( lines1 ) < max_lines : lines1 . extend ([ Text ( \"\" )] * ( max_lines - len ( lines1 ))) if len ( lines2 ) < max_lines : lines2 . extend ([ Text ( \"\" )] * ( max_lines - len ( lines2 ))) # Join the padded lines into a single Text object for the Panel content padded_inspect_text1 : Text = Text ( \" \\n \" ) . join ( lines1 ) padded_inspect_text2 : Text = Text ( \" \\n \" ) . join ( lines2 ) panel1 : Panel = Panel ( padded_inspect_text1 , border_style = \"green\" , expand = True ) panel2 : Panel = Panel ( padded_inspect_text2 , border_style = \"green\" , expand = True ) main_console . print ( Columns ([ panel1 , panel2 ])) Debug Dojo configuration module. It includes configurations for different debuggers, exception handling, and features that can be enabled or disabled.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;inspect_objects_side_by_side"},{"location":"api-reference/#debug_dojo._config.__filter_pydantic_error_msg","text":"Filter out specific lines from a Pydantic validation error. Source code in src/debug_dojo/_config.py 26 27 28 29 30 31 32 def __filter_pydantic_error_msg ( error : ValidationError ) -> str : \"\"\"Filter out specific lines from a Pydantic validation error.\"\"\" return \" \\n \" . join ( line for line in str ( error ) . splitlines () if not line . startswith ( \"For further information visit\" ) )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;__filter_pydantic_error_msg"},{"location":"api-reference/#debug_dojo._config.load_config","text":"Load the Debug Dojo configuration and return a DebugDojoConfig instance. Source code in src/debug_dojo/_config.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def load_config ( # noqa: C901 config_path : Path | None = None , * , verbose : bool = False , debugger : DebuggerType | None = None , ) -> DebugDojoConfig : \"\"\"Load the Debug Dojo configuration and return a DebugDojoConfig instance.\"\"\" resolved_path = resolve_config_path ( config_path ) if verbose : if resolved_path : msg = f \"Using configuration file: { resolved_path } .\" else : msg = \"No configuration file found, using default settings.\" rich_print ( f \"[blue] { msg } [/blue]\" ) if not resolved_path : return DebugDojoConfig () raw_config = load_raw_config ( resolved_path ) config = None for model in ( DebugDojoConfigV2 , DebugDojoConfigV1 ): model_name = model . __name__ try : config = model . model_validate ( raw_config ) except ValidationError as e : if verbose : msg = ( f \"[yellow]Configuration validation error for { model_name } : \\n \" f \" { __filter_pydantic_error_msg ( e ) } \\n\\n \" f \"Please check your configuration file { resolved_path } .[/yellow]\" ) rich_print ( msg ) else : if verbose or model_name != DebugDojoConfig . __name__ : msg = ( f \"[blue]Using configuration model: { model_name } . \\n \" f \"Current configuration model { DebugDojoConfig . __name__ } . [/blue]\" ) rich_print ( msg ) break if not config : msg = ( f \"[red]Unsupported configuration version in { resolved_path . resolve () } . \\n \" \"Please update your configuration file.[/red]\" ) rich_print ( msg ) sys . exit ( 1 ) while not isinstance ( config , DebugDojoConfig ): config = config . update () # If a debugger is specified, update the config. if debugger : config . debuggers . default = debugger return config","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;load_config"},{"location":"api-reference/#debug_dojo._config.load_raw_config","text":"Load the Debug Dojo configuration from a file. Currently supports \u2018dojo.toml\u2019 or \u2018pyproject.toml\u2019. If no path is provided, it checks the current directory for these files. Source code in src/debug_dojo/_config.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def load_raw_config ( config_path : Path , ) -> dict [ str , Any ]: # pyright: ignore[reportExplicitAny] \"\"\"Load the Debug Dojo configuration from a file. Currently supports 'dojo.toml' or 'pyproject.toml'. If no path is provided, it checks the current directory for these files. \"\"\" config_str = config_path . read_text ( encoding = \"utf-8\" ) try : config_data = parse ( config_str ) . unwrap () except TOMLKitError as e : msg = f \"Error parsing configuration file { config_path . resolve () } .\" raise ValueError ( msg ) from e # If config is in [tool.debug_dojo] (pyproject.toml), extract it. if config_path . name == \"pyproject.toml\" : try : dojo_config = cast ( \"dict[str, Any]\" , config_data [ \"tool\" ][ \"debug_dojo\" ]) except KeyError : return {} else : return dojo_config return config_data","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;load_raw_config"},{"location":"api-reference/#debug_dojo._config.resolve_config_path","text":"Resolve the configuration path, returning a default if none is provided. Source code in src/debug_dojo/_config.py 35 36 37 38 39 40 41 42 43 44 45 46 47 def resolve_config_path ( config_path : Path | None ) -> Path | None : \"\"\"Resolve the configuration path, returning a default if none is provided.\"\"\" if config_path : if not config_path . exists (): msg = f \"Configuration file not found: \\n { config_path . resolve () } \" raise FileNotFoundError ( msg ) return config_path . resolve () # Default configuration path for path in ( Path ( \"dojo.toml\" ), Path ( \"pyproject.toml\" )): if path . exists (): return path . resolve () return None","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;resolve_config_path"},{"location":"api-reference/#debug_dojo._config_models.BaseConfig","text":"Bases: BaseModel Base configuration class with extra fields forbidden. Source code in src/debug_dojo/_config_models.py 8 9 10 11 class BaseConfig ( BaseModel ): \"\"\"Base configuration class with extra fields forbidden.\"\"\" model_config = ConfigDict ( extra = \"forbid\" , validate_assignment = True )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;BaseConfig"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1","text":"Bases: BaseModel Configuration for Debug Dojo. Source code in src/debug_dojo/_config_models.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class DebugDojoConfigV1 ( BaseModel ): \"\"\"Configuration for Debug Dojo.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] debugger : DebuggerType = DebuggerType . PUDB \"\"\"The type of debugger to use.\"\"\" features : Features = Features () \"\"\"Features to install for debugging.\"\"\" def update ( self ) -> DebugDojoConfigV2 : \"\"\"Update the configuration to the latest version.\"\"\" v2_exceptions = ExceptionsConfig ( rich_traceback = self . features . rich_traceback , ) v2_debuggers = DebuggersConfig ( default = self . debugger ) v2_features = FeaturesConfig ( rich_inspect = \"i\" if self . features . rich_inspect else \"\" , rich_print = \"p\" if self . features . rich_print else \"\" , comparer = \"c\" if self . features . comparer else \"\" , breakpoint = \"b\" if self . features . breakpoint else \"\" , ) return DebugDojoConfigV2 ( exceptions = v2_exceptions , debuggers = v2_debuggers , features = v2_features , )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DebugDojoConfigV1"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.debugger","text":"The type of debugger to use.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;debugger"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.features","text":"Features to install for debugging.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;features"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV1.update","text":"Update the configuration to the latest version. Source code in src/debug_dojo/_config_models.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def update ( self ) -> DebugDojoConfigV2 : \"\"\"Update the configuration to the latest version.\"\"\" v2_exceptions = ExceptionsConfig ( rich_traceback = self . features . rich_traceback , ) v2_debuggers = DebuggersConfig ( default = self . debugger ) v2_features = FeaturesConfig ( rich_inspect = \"i\" if self . features . rich_inspect else \"\" , rich_print = \"p\" if self . features . rich_print else \"\" , comparer = \"c\" if self . features . comparer else \"\" , breakpoint = \"b\" if self . features . breakpoint else \"\" , ) return DebugDojoConfigV2 ( exceptions = v2_exceptions , debuggers = v2_debuggers , features = v2_features , )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;update"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2","text":"Bases: BaseModel Configuration for Debug Dojo. Source code in src/debug_dojo/_config_models.py 126 127 128 129 130 131 132 133 134 135 class DebugDojoConfigV2 ( BaseModel ): \"\"\"Configuration for Debug Dojo.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] exceptions : ExceptionsConfig = ExceptionsConfig () debuggers : DebuggersConfig = DebuggersConfig () \"\"\"Default debugger and configs.\"\"\" features : FeaturesConfig = FeaturesConfig () \"\"\"Features mnemonics .\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DebugDojoConfigV2"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2.debuggers","text":"Default debugger and configs.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;debuggers"},{"location":"api-reference/#debug_dojo._config_models.DebugDojoConfigV2.features","text":"Features mnemonics .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;features"},{"location":"api-reference/#debug_dojo._config_models.DebuggerType","text":"Bases: Enum Enum for different types of debuggers. Source code in src/debug_dojo/_config_models.py 14 15 16 17 18 19 20 class DebuggerType ( Enum ): \"\"\"Enum for different types of debuggers.\"\"\" PDB = \"pdb\" PUDB = \"pudb\" IPDB = \"ipdb\" DEBUGPY = \"debugpy\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DebuggerType"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig","text":"Bases: BaseConfig Configuration for debuggers. Source code in src/debug_dojo/_config_models.py 60 61 62 63 64 65 66 67 68 69 70 class DebuggersConfig ( BaseConfig ): \"\"\"Configuration for debuggers.\"\"\" default : DebuggerType = DebuggerType . IPDB \"\"\"Default debugger to use.\"\"\" prompt_name : str = \"debug-dojo> \" \"\"\"Prompt name for the debugger, used in the REPL.\"\"\" debugpy : DebugpyConfig = DebugpyConfig () \"\"\"Configuration for debugpy debugger.\"\"\" ipdb : IpdbConfig = IpdbConfig () \"\"\"Configuration for ipdb debugger.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DebuggersConfig"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.debugpy","text":"Configuration for debugpy debugger.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;debugpy"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.default","text":"Default debugger to use.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;default"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.ipdb","text":"Configuration for ipdb debugger.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;ipdb"},{"location":"api-reference/#debug_dojo._config_models.DebuggersConfig.prompt_name","text":"Prompt name for the debugger, used in the REPL.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;prompt_name"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig","text":"Bases: BaseConfig Configuration for debugpy debugger. Source code in src/debug_dojo/_config_models.py 40 41 42 43 44 45 46 47 48 49 50 class DebugpyConfig ( BaseConfig ): \"\"\"Configuration for debugpy debugger.\"\"\" port : int = 1992 \"\"\"Port for debugpy debugger.\"\"\" host : str = \"localhost\" \"\"\"Host for debugpy debugger.\"\"\" wait_for_client : bool = True \"\"\"Whether to wait for the client to connect before starting debugging.\"\"\" log_to_file : bool = False \"\"\"Whether to log debugpy output to a file.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DebugpyConfig"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.host","text":"Host for debugpy debugger.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;host"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.log_to_file","text":"Whether to log debugpy output to a file.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;log_to_file"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.port","text":"Port for debugpy debugger.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;port"},{"location":"api-reference/#debug_dojo._config_models.DebugpyConfig.wait_for_client","text":"Whether to wait for the client to connect before starting debugging.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;wait_for_client"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig","text":"Bases: BaseConfig Configuration for exceptions handling. Source code in src/debug_dojo/_config_models.py 73 74 75 76 77 78 79 80 81 class ExceptionsConfig ( BaseConfig ): \"\"\"Configuration for exceptions handling.\"\"\" rich_traceback : bool = True \"\"\"Enable rich traceback for better error reporting.\"\"\" locals_in_traceback : bool = False \"\"\"Include local variables in traceback.\"\"\" post_mortem : bool = True \"\"\"Enable post-mortem debugging after an exception.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExceptionsConfig"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.locals_in_traceback","text":"Include local variables in traceback.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;locals_in_traceback"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.post_mortem","text":"Enable post-mortem debugging after an exception.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;post_mortem"},{"location":"api-reference/#debug_dojo._config_models.ExceptionsConfig.rich_traceback","text":"Enable rich traceback for better error reporting.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_traceback"},{"location":"api-reference/#debug_dojo._config_models.Features","text":"Bases: BaseModel Configuration for installing debug features. Source code in src/debug_dojo/_config_models.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Features ( BaseModel ): \"\"\"Configuration for installing debug features.\"\"\" model_config = ConfigDict ( extra = \"forbid\" ) # pyright: ignore[reportUnannotatedClassAttribute] rich_inspect : bool = True \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\" rich_print : bool = True \"\"\"Install rich print as 'p' for enhanced printing.\"\"\" rich_traceback : bool = True \"\"\"Install rich traceback for better error reporting.\"\"\" comparer : bool = True \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\" breakpoint : bool = True \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;Features"},{"location":"api-reference/#debug_dojo._config_models.Features.breakpoint","text":"Install breakpoint as \u2018b\u2019 for setting breakpoints in code.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;breakpoint"},{"location":"api-reference/#debug_dojo._config_models.Features.comparer","text":"Install comparer as \u2018c\u2019 for side-by-side object comparison.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;comparer"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_inspect","text":"Install rich inspect as \u2018i\u2019 for enhanced object inspection.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_inspect"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_print","text":"Install rich print as \u2018p\u2019 for enhanced printing.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_print"},{"location":"api-reference/#debug_dojo._config_models.Features.rich_traceback","text":"Install rich traceback for better error reporting.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_traceback"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig","text":"Bases: BaseConfig Configuration for installing debug features. Source code in src/debug_dojo/_config_models.py 84 85 86 87 88 89 90 91 92 93 94 class FeaturesConfig ( BaseConfig ): \"\"\"Configuration for installing debug features.\"\"\" rich_inspect : str = \"i\" \"\"\"Install rich inspect as 'i' for enhanced object inspection.\"\"\" rich_print : str = \"p\" \"\"\"Install rich print as 'p' for enhanced printing.\"\"\" comparer : str = \"c\" \"\"\"Install comparer as 'c' for side-by-side object comparison.\"\"\" breakpoint : str = \"b\" \"\"\"Install breakpoint as 'b' for setting breakpoints in code.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;FeaturesConfig"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.breakpoint","text":"Install breakpoint as \u2018b\u2019 for setting breakpoints in code.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;breakpoint"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.comparer","text":"Install comparer as \u2018c\u2019 for side-by-side object comparison.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;comparer"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.rich_inspect","text":"Install rich inspect as \u2018i\u2019 for enhanced object inspection.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_inspect"},{"location":"api-reference/#debug_dojo._config_models.FeaturesConfig.rich_print","text":"Install rich print as \u2018p\u2019 for enhanced printing.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;rich_print"},{"location":"api-reference/#debug_dojo._config_models.IpdbConfig","text":"Bases: BaseConfig Configuration for ipdb debugger. Source code in src/debug_dojo/_config_models.py 53 54 55 56 57 class IpdbConfig ( BaseConfig ): \"\"\"Configuration for ipdb debugger.\"\"\" context_lines : int = 20 \"\"\"Number of context lines to show in ipdb.\"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;IpdbConfig"},{"location":"api-reference/#debug_dojo._config_models.IpdbConfig.context_lines","text":"Number of context lines to show in ipdb. Command-line interface for running Python scripts or modules with debugging tools.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;context_lines"},{"location":"api-reference/#debug_dojo._cli.display_config","text":"Display the configuration for the debug dojo. Source code in src/debug_dojo/_cli.py 72 73 74 75 def display_config ( config : DebugDojoConfig ) -> None : \"\"\"Display the configuration for the debug dojo.\"\"\" rich_print ( \"[blue]Using debug-dojo configuration:[/blue]\" ) rich_print ( config . model_dump_json ( indent = 4 ))","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;display_config"},{"location":"api-reference/#debug_dojo._cli.execute_with_debug","text":"Execute a target script or module with installation of debugging tools. Source code in src/debug_dojo/_cli.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def execute_with_debug ( # noqa: C901 target_name : str , target_args : list [ str ], * , target_is_module : bool , verbose : bool , config : DebugDojoConfig , ) -> None : \"\"\"Execute a target script or module with installation of debugging tools.\"\"\" sys . argv = [ target_name , * target_args ] if verbose : rich_print ( f \"[blue]Installing debugging tools for { target_name } .[/blue]\" ) rich_print ( f \"[blue]Arguments for target: { target_args } [/blue]\" ) install_by_config ( config ) if target_is_module : runner = runpy . run_module else : if not Path ( target_name ) . exists (): sys . exit ( 1 ) runner = runpy . run_path try : _ = runner ( target_name , run_name = \"__main__\" ) except ImportError as e : rich_print ( f \"[red]Error importing { target_name } :[/red] \\n { e } \" ) sys . exit ( 1 ) except BdbQuit : rich_print ( \"[red]Debugging session terminated by user.[/red]\" ) sys . exit ( 0 ) except KeyboardInterrupt : rich_print ( \"[red]Execution interrupted by user.[/red]\" ) sys . exit ( 0 ) except SystemExit as e : if e . code : rich_print ( f \"[red]Script exited with code { e . code } .[/red]\" ) except Exception as e : # noqa: BLE001 rich_print ( f \"[red]Error while running { target_name } :[/red] \\n { e } \" ) if config . exceptions . post_mortem : import pdb # noqa: PLC0415, T100 rich_print ( \"[blue]Entering post-mortem debugging session...[/blue]\" ) pdb . post_mortem ( e . __traceback__ ) sys . exit ( 1 )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;execute_with_debug"},{"location":"api-reference/#debug_dojo._cli.main","text":"Run the command-line interface. Source code in src/debug_dojo/_cli.py 121 122 123 def main () -> None : \"\"\"Run the command-line interface.\"\"\" cli ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;main"},{"location":"api-reference/#debug_dojo._cli.run_debug","text":"Run the command-line interface. Source code in src/debug_dojo/_cli.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @cli . command ( help = \"Run a Python script or module with debugging tools installed.\" , no_args_is_help = True , context_settings = { \"allow_extra_args\" : True , \"ignore_unknown_options\" : True }, ) def run_debug ( # noqa: PLR0913 ctx : typer . Context , target_name : Annotated [ str | None , typer . Argument ( help = \"The target script or module to debug.\" ) ] = None , * , config_path : Annotated [ Path | None , typer . Option ( \"--config\" , \"-c\" , help = \"Show configuration\" ) ] = None , debugger : Annotated [ DebuggerType | None , typer . Option ( \"--debugger\" , \"-d\" , help = \"Specify the debugger to use\" ), ] = None , verbose : Annotated [ bool , typer . Option ( \"--verbose\" , \"-v\" , is_flag = True , help = \"Enable verbose output\" ), ] = False , module : Annotated [ bool , typer . Option ( \"--module\" , \"-m\" , is_flag = True , help = \"Run as a module\" ), ] = False , ) -> None : \"\"\"Run the command-line interface.\"\"\" config = load_config ( config_path , verbose = verbose , debugger = debugger ) if verbose : display_config ( config ) if target_name : execute_with_debug ( target_name = target_name , target_is_module = module , target_args = ctx . args , verbose = verbose , config = config , )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;run_debug"},{"location":"changelog/","text":"Changelog \u00b6 v0.4.0 (2025-08-10) \u00b6 release tag : v0.4.0 New configuration model DebugDojoConfig for better structure. Added support for debugger configuration in dojo.toml . Updated dojo command to include debugger type in command call. Configuration versioning allows for in-flight migration of old configurations. Improved error handling in configuration loading. Improved catching errors from target execution. v0.3.2 (2025-07-28) \u00b6 release tag : v0.3.2 New logo for the project. Typer used for CLI implementation. Dojo is configured via dojo.toml or pyproject.toml . Support for debugpy and ipdb for debugging. Fixed documentation and history. v0.2.0 (2025-07-20) \u00b6 release tag : v0.2.0 Added dojo command for easy debugging setup. Added p() function for rich printing. Added history file for tracking changes. Moved to hatch for building and packaging. Fixed pyproject.toml to point to GitHub repository as the homepage. v0.1.0 (2025-07-19) \u00b6 release tag : v0.1.0 Initial module to install debugging tools. Debug mode utilities for PuDB, rich tracebacks, and object inspection.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v040-2025-08-10","text":"release tag : v0.4.0 New configuration model DebugDojoConfig for better structure. Added support for debugger configuration in dojo.toml . Updated dojo command to include debugger type in command call. Configuration versioning allows for in-flight migration of old configurations. Improved error handling in configuration loading. Improved catching errors from target execution.","title":"v0.4.0 (2025-08-10)"},{"location":"changelog/#v032-2025-07-28","text":"release tag : v0.3.2 New logo for the project. Typer used for CLI implementation. Dojo is configured via dojo.toml or pyproject.toml . Support for debugpy and ipdb for debugging. Fixed documentation and history.","title":"v0.3.2 (2025-07-28)"},{"location":"changelog/#v020-2025-07-20","text":"release tag : v0.2.0 Added dojo command for easy debugging setup. Added p() function for rich printing. Added history file for tracking changes. Moved to hatch for building and packaging. Fixed pyproject.toml to point to GitHub repository as the homepage.","title":"v0.2.0 (2025-07-20)"},{"location":"changelog/#v010-2025-07-19","text":"release tag : v0.1.0 Initial module to install debugging tools. Debug mode utilities for PuDB, rich tracebacks, and object inspection.","title":"v0.1.0 (2025-07-19)"},{"location":"cli-reference/","text":"CLI Reference \u00b6 Usage \u00b6 Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module dojo \u00b6 Run a Python script or module with debugging tools installed. Usage \u00b6 dojo [OPTIONS][TARGET_NAME] Arguments \u00b6 Name Description Required [TARGET_NAME] The target script or module to debug. No Options \u00b6 Name Description Required Default -c, \u2013config PATH Show configuration No - -d, \u2013debugger [pdb|pudb|ipdb|debugpy] Specify the debugger to use No - -v, \u2013verbose Enable verbose output No - -m, \u2013module Run as a module No - \u2013install-completion Install completion for the current shell. No - \u2013show-completion Show completion for the current shell, to copy it or customize the installation. No - \u2013help Show this message and exit. No - Commands \u00b6 No commands available","title":"CLI"},{"location":"cli-reference/#cli-reference","text":"","title":"CLI Reference"},{"location":"cli-reference/#usage","text":"Run your Python script with debugging tools enabled using the debug-dojo command: dojo my_script.py You can optionally set configuration, verbose mode, and specify the debugger type. Both script files and modules are supported: dojo --debugger ipdb --config dojo.toml --verbose --module my_module","title":"Usage"},{"location":"cli-reference/#dojo","text":"Run a Python script or module with debugging tools installed.","title":"dojo"},{"location":"cli-reference/#usage_1","text":"dojo [OPTIONS][TARGET_NAME]","title":"Usage"},{"location":"cli-reference/#arguments","text":"Name Description Required [TARGET_NAME] The target script or module to debug. No","title":"Arguments"},{"location":"cli-reference/#options","text":"Name Description Required Default -c, \u2013config PATH Show configuration No - -d, \u2013debugger [pdb|pudb|ipdb|debugpy] Specify the debugger to use No - -v, \u2013verbose Enable verbose output No - -m, \u2013module Run as a module No - \u2013install-completion Install completion for the current shell. No - \u2013show-completion Show completion for the current shell, to copy it or customize the installation. No - \u2013help Show this message and exit. No -","title":"Options"},{"location":"cli-reference/#commands","text":"No commands available","title":"Commands"},{"location":"configuration/","text":"Configuration \u00b6 You can configure the debugging tools using a dojo.toml or pyproject.toml file. The configuration allows you to specify which debugger to use, enable or disable features, and set other options. Example dojo.toml : [debuggers] default = \"ipdb\" debugpy = { port = 1992 } ipdb = { context_lines = 20 } [exceptions] locals_in_traceback = false post_mortem = true rich_traceback = true [features] breakpoint = \"b\" # Empty string means disable the feature comparer = \"\" rich_inspect = \"i\" rich_print = \"p\"","title":"Configuration"},{"location":"configuration/#configuration","text":"You can configure the debugging tools using a dojo.toml or pyproject.toml file. The configuration allows you to specify which debugger to use, enable or disable features, and set other options. Example dojo.toml : [debuggers] default = \"ipdb\" debugpy = { port = 1992 } ipdb = { context_lines = 20 } [exceptions] locals_in_traceback = false post_mortem = true rich_traceback = true [features] breakpoint = \"b\" # Empty string means disable the feature comparer = \"\" rich_inspect = \"i\" rich_print = \"p\"","title":"Configuration"},{"location":"development/","text":"Development and contributing \u00b6 Project uses poe for defining developer tasks. Lint and type check \u00b6 We\u2019re using ruff as formatter and linter and basedpyright for static type checking. You can run all three with simple command: poe code-quality Tests \u00b6 Pytest is used for testing. Currently only few example doc tests are set up. poe test Contributing \u00b6 You\u2019re welcome to contribute both new features and fixes. The above quality checks need to pass for a contribution to be accepted to debug-dojo . This is tested with Pull Requests job hook. It is recommended to set up a pre-commit hook based on the included config. pre-commit install","title":"Development"},{"location":"development/#development-and-contributing","text":"Project uses poe for defining developer tasks.","title":"Development and contributing"},{"location":"development/#lint-and-type-check","text":"We\u2019re using ruff as formatter and linter and basedpyright for static type checking. You can run all three with simple command: poe code-quality","title":"Lint and type check"},{"location":"development/#tests","text":"Pytest is used for testing. Currently only few example doc tests are set up. poe test","title":"Tests"},{"location":"development/#contributing","text":"You\u2019re welcome to contribute both new features and fixes. The above quality checks need to pass for a contribution to be accepted to debug-dojo . This is tested with Pull Requests job hook. It is recommended to set up a pre-commit hook based on the included config. pre-commit install","title":"Contributing"},{"location":"license/","text":"The MIT License (MIT) \u00b6 Copyright (c) 2025 to bwrob. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#the-mit-license-mit","text":"Copyright (c) 2025 to bwrob. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}